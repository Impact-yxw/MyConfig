
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 用户自定义配置（该文件放一般性配置，可覆盖~/.vimrc里的配置，若要增加、卸载插件，请放入~/.vimrc.custom.plugins）
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 开启相对行号
" set relativenumber

" 开启鼠标
" set mouse=a

" 设置光标所在列高亮
"set cursorcolumn

" indentLine 开启代码对齐线
" let g:indentLine_enabled = 1

" markdown
" let system = system('uname -s')
" if system == "Darwin\n"
"     let g:mkdp_path_to_chrome = "/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome"
" else
"     let g:mkdp_path_to_chrome = '/usr/bin/google-chrome-stable %U'
" endif
" nmap <silent> <F7> <Plug>MarkdownPreview
" imap <silent> <F7> <Plug>MarkdownPreview
" nmap <silent> <F8> <Plug>StopMarkdownPreview
" imap <silent> <F8> <Plug>StopMarkdownPreview

" Doxygen
" let g:DoxygenToolkit_authorName="chxuan, 787280310@qq.com"
" let s:licenseTag = "Copyright(C)\<enter>"
" let s:licenseTag = s:licenseTag . "For free\<enter>"
" let s:licenseTag = s:licenseTag . "All right reserved\<enter>"
" let g:DoxygenToolkit_licenseTag = s:licenseTag
" let g:DoxygenToolkit_briefTag_funcName="yes"
" let g:doxygen_enhanced_color=1
" let g:DoxygenToolkit_commentType="Qt"


"   k
" h   l
"   j
syntax on
map W :w<cr>
map Q :q<cr>
map s <nop>
map R :source $MYVIMRC<cr>
map D :%d<cr>
noremap B :bn<cr>
"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
" Enable folding
set foldmethod=indent
set foldlevel=99
" Enable folding with the spacebar
nnoremap <space> za
set nofoldenable
set cursorline

set autoindent
set tabstop=4
set shiftwidth=4
set expandtab
set softtabstop=4
set textwidth=1000
set fileformat=unix

set cindent
set cinoptions={0,1s,t0,n-2,p2s,(03s,=.5s,>1s,=1s,:1s
set nu
augroup relative_numbser
    autocmd!
    autocmd InsertEnter * :set norelativenumber
    autocmd InsertLeave * :set relativenumber
augroup END
set relativenumber
set ruler
set hlsearch
set backspace=2
set nocompatible
set laststatus=2
set t_Co=256

set mouse=n
set undofile
set autochdir
set autoread

filetype off
filetype indent on
filetype plugin indent on
set rtp+=~/.vim/bundle/Vundle.vim

"call vundle#begin()
"
""YCM
"Plugin 'Valloric/YouCompleteMe'
"Plugin 'Chiel92/vim-autoformat'
"
"常用语言高亮
"Plugin 'sheerun/vim-polyglot'
"Plugin 'rust-lang/rust.vim'
"Plugin 'AtsushiSakai/julia.vim'
"Plugin 'udalov/kotlin-vim'
"Plugin 'fatih/vim-go'
"Plugin 'hail2u/vim-css3-syntax'
"Plugin 'ap/vim-css-color'
"Plugin 'pangloss/vim-javascript'
"Plugin 'stephpy/vim-yaml'
"Plugin 'taglist.vim'
"Plugin 'othree/xml.vim'
""python
"Plugin 'vim-scripts/indentpython.vim'
"Plugin 'nvie/vim-flake8'
"Plugin 'vim-syntastic/syntastic'
"
""markdown
"Plugin 'suan/vim-instant-markdown'
"Plugin 'plasticboy/vim-markdown'"安装插件
"
""常用插件
"
""spuer find
"Plugin 'kien/ctrlp.vim'
"Plugin 'Tagbar'
"Plugin 'jiangmiao/auto-pairs'
"Plugin 'scrooloose/nerdtree'
"Plugin 'jistr/vim-nerdtree-tabs'
"Plugin 'Xuyuanp/nerdtree-git-plugin'
"Plugin 'marijnh/tern_for_vim'
"Plugin 'godlygeek/tabular'
"Plugin 'vim-airline/vim-airline'
"Plugin 'majutsushi/tagbar'
"call vundle#end()


"前端
"设置tagber对于markdown的支持
let g:tagbar_type_markdown = {
            \ 'ctagstype' : 'markdown',
            \ 'kinds' : [
            \ 'h:Chapter',
            \ 'i:Section',
            \ 'k:Paragraph',
            \ 'j:Subparagraph'
            \ ]
            \ }
let g:user_emmet_leader_key = '<Tab>'
let g:user_emmet_settings = {
            \ 'javascript.jsx' : {
            \ 'extends' : 'jsx',
            \ },
            \ }
let g:user_emmet_install_global = 0
let g:javascript_plugin_jsdoc =1
let g:javascript_plugin_ngdoc =1
let g:javascript_plugin_flow =1
set foldmethod=syntax
let g:javascript_conceal_function ="ƒ"
let g:javascript_conceal_null ="ø"
let g:javascript_conceal_this ="@"
let g:javascript_conceal_return ="⇚"
let g:javascript_conceal_undefined ="¿"
let g:javascript_conceal_NaN ="ℕ"
let g:javascript_conceal_prototype ="¶"
let g:javascript_conceal_static ="•"
let g:javascript_conceal_super ="Ω"
let g:javascript_conceal_arrow_function ="⇒"
let g:javascript_conceal_noarg_arrow_function =" "
let g:javascript_conceal_underscore_arrow_function =" "
set conceallevel=1
autocmd FileType html,css EmmetInstall

"状态栏
"不显示文档总字数
let g:airline#extensions#wordcount#enabled = 0
"取消显示warning部分
let g:airline_section_warning = ''
"section_c显示为tagbar检索出来的标题
let g:airline_section_c = airline#section#create(['tagbar'])
"section_x显示文件名
let g:airline_section_x = '%{expand("%")}'
"section_y显示时间
let g:airline_section_y = airline#section#create(['%{strftime("%D")}'])
"section_z显示日期
let g:airline_section_z = airline#section#create(['%{strftime("%H:%M:%S")}'])
"激活tagbar扩展
let g:airline#extensions#tagbar#enabled = 1
set pumheight=10

let NERDTreeWinSize=20
let g:NERDTreeGitStatusShowIgnored=1
let NERDTreeShowHidden=1
"let g:nerdtree_tabs_open_on_console_startup=1
let  g:NERDTreeGitStatusIndicatorMapCustom= {
            \ "Modified"  : "✹",
            \ "Staged"    : "✚",
            \ "Untracked" : "✭",
            \ "Renamed"   : "➜",
            \ "Unmerged"  : "═",
            \ "Deleted"   : "✖",
            \ "Dirty"     : "✗",
            \ "Clean"     : "✔︎",
            \ 'Ignored'   : '☒',
            \ "Unknown"   : "?"
            \ }

"# o 打开关闭文件或目录
"# e 以文件管理的方式打开选中的目录
"# t 在标签页中打开
"# T 在标签页中打开，但光标仍然留在 NERDTree
"# r 刷新光标所在的目录
"# R 刷新当前根路径
"# X 收起所有目录
"# p 小写，跳转到光标所在的上一级路径
"# P 大写，跳转到当前根路径
"# J 到第一个节点
"# K 到最后一个节点
"# I 显示隐藏文件
"# m 显示文件操作菜单
"# C 将根路径设置为光标所在的目录
"# u 设置上级目录为根路径
"# ctrl + w + w 光标自动在左右侧窗口切换
"# ctrl + w + r 移动当前窗口的布局位置
"# :tabc 关闭当前的 tab
"# :tabo   关闭所有其他的 tab
"# :tabp   前一个 tab
"# :tabn   后一个 tab
"# gT      前一个 tab
"# gt      后一个 tab




" YCM 常用命令
"    :YcmRestartServer　　重启 YCM 服务器
"    :YcmCompleter　　显示可用的子命令
"    :YcmCompleter GetParent　　显示父函数、父类等
"    :YcmCompleter GetType　　显示类型、参数等信息
"    :YcmCompleter GetDoc　　跳转至相关文档（若有）
"    :YcmCompleter GoToDeclaration　　跳转至声明处
"    :YcmCompleter GoToDefinition　　跳转至定义处
"    :YcmCompleter GoToInclude　　跳转至头文件处
noremap fi :YcmCompleter FixIt<cr>
noremap fm :YcmCompleter Format<cr>
noremap cd :YcmCompleter GetDoc<cr>
noremap cp :YcmCompleter GetParent<cr>
noremap ct :YcmCompleter GetType<cr>
noremap cf :YcmCompleter GoToDefinition<cr>
noremap cr :YcmCompleter GoToDeclaration<cr>

set completeopt=longest,menu
let g:ycm_python_binary_path = '/usr/bin/python3'
let g:ycm_global_ycm_extra_conf='~/.ycm_extra_conf.py'
let g:ycm_server_log_level = 'info'
let g:ycm_confirm_extra_conf = 0
" 禁止缓存匹配项,每次都重新生成匹配项
let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_cache_omnifunc=0
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_min_num_of_chars_for_completion = 2
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_complete_in_strings=1
let g:ycm_seed_identifiers_with_syntax=1
"在字符串输入中也能补全
let g:ycm_complete_in_strings = 1
" 在注释中也可以补全
let g:ycm_complete_in_comments=1
" 错误标识符
let g:ycm_error_symbol='E'
" 警告标识符
let g:ycm_warning_symbol='W'
let g:ycm_semantic_triggers =  {
            \ 'c,cpp,python,golang,rust,java,perl': ['re!\w{2}'],
            \ 'css,lua,javascript': ['re!\w{2}'],
            \ }

let g:rustfmt_autosave = 1

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
noremap gb :GoDoc<cr>
noremap gdb :GoDocBrowser<cr>
noremap gi :GoImport 
noremap gc :GoErrCheck<cr>

colorscheme koehler
noremap <F8> :silent! NERDTreeToggle<cr>
"开关目录树快捷键:

"ctags
"设置ctags路径
let Tlist_Ctags_Cmd = '/usr/bin/ctags'
"启动vim后不自动打开taglist窗口
let Tlist_Auto_Open = 0

"不同时显示多个文件的tag，仅显示一个
let Tlist_Show_One_File = 1
"taglist为最后一个窗口时，退出vim
let Tlist_Exit_OnlyWindow = 1

"taglist窗口显示在右侧，缺省为左侧
let Tlist_Use_Right_Window =1
"设置taglist窗口大小
let Tlist_WinWidth = 20
"设置taglist打开关闭的快捷键F7
noremap <F7> :TlistToggle<cr>

"更新ctags标签文件快捷键设置
"noremap <F6> :!ctags -R<cr>
noremap h 5h
noremap j 5j
noremap k 5k
noremap l 5l

let g:tex_flavor = 'latex'
